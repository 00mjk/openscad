name: macos-release

on:
  push:
    branches:
      - macos-release-build
      - macos-release-github
    tags:
      - '*'

jobs:
  build:
    runs-on: macos-latest
    env:
      OPENSCAD_LIBRARIES: /Users/runner/work/actions-test/libraries/install/
    steps:
    - name: Checkout OpenSCAD
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install Homebrew packages
      run: |
        brew update
        brew install automake
    - name: Cache Libraries
      id: cache-libraries
      uses: actions/cache@v2
      with:
        path: ${{ env.OPENSCAD_LIBRARIES }}
        key: ${{ runner.os }}-libraries-${{ hashFiles('./scripts/macosx-build-dependencies.sh', '.github/workflows/macos-release.yml') }}
        restore-keys: ${{ runner.os }}-libraries-
    - name: Build Dependencies
      run: |
        echo "PWD = $CI_BASEDIR"
        export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
        echo "PATH = $PATH"
        export PKG_CONFIG_PATH="$OPENSCAD_LIBRARIES/lib/pkgconfig"
        export DYLD_LIBRARY_PATH="$OPENSCAD_LIBRARIES/lib"
        export DYLD_FRAMEWORK_PATH="$OPENSCAD_LIBRARIES/lib"
        echo "DYLD_LIBRARY_PATH: $DYLD_LIBRARY_PATH"
        # Pick up our own Qt
        export PATH=$OPENSCAD_LIBRARIES/bin:$PATH
        ./scripts/macosx-build-dependencies.sh -d
        mkdir -p ${{ runner.temp }}/out
        tar cz -C "$OPENSCAD_LIBRARIES" -f ${{ runner.temp }}/out/"$LIBRARIES_CACHE" .
        shasum -a 512 ${{ runner.temp }}/out/"$LIBRARIES_CACHE" > ${{ runner.temp }}/out/"$LIBRARIES_CACHE".sha512
#    - name: Build OpenSCAD
#      run: |
#        echo "Start building OpenSCAD: $(date)"
#        export NUMCPU=4
#        time ./scripts/release-common.sh
#        cd build
#        OPENSCAD_NAME=$(ls OpenSCAD-*.dmg)
#        shasum -a 256 "$OPENSCAD_NAME" > "$OPENSCAD_NAME".sha256
#        shasum -a 512 "$OPENSCAD_NAME" > "$OPENSCAD_NAME".sha512
#        cp -v "$OPENSCAD_NAME"* ${{ runner.temp }}/out/
#        echo "Finished building OpenSCAD: $(date)"
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: Build Artifacts
        path: ${{ runner.temp }}/out/
