This README covers a few caveats regarding OpenSCAD for Windows(TM) for
programmers and users.

Summary: As of writing, early 2014:

  -Windows filenames & cmdline args are ~UTF16, Linux/Mac are UTF8.
  -There is no open source ifstream/ofstream fopen() that works with both.
  -Therefore all file i/o must go through PlatformUtils:: wrappers
  -std::ifstream & std::ofstream are limited in capability by our wrappers
  -Windows stdout/stdin differs in behavior between GUI programs and cmdline
  -Windows console has issues outputting unicode of any encoding.
  -openscad.com is the command line wrapper for openscad.exe, the gui

00. Encoding of Unicode

As you may know, Unicode can be encoded in many different ways.
Unix(TM)/Mac(TM) use UTF8, which makes each character into a sequence of 
one or more 8-bit bytes. Windows(TM) uses UTF16 (or UCS16 for very old 
versions). This means that the Windows Command Line Options and the 
Windows Filesystem will present UTF16 encoded data to the program, as 
well as requiring UTF16 data from the program when performing certain tasks. 
Therefore, some code that works on Unix/Mac won't operate as expected 
on Windows.

Unix/Mac typically use 'char' as the basic data type, and assume it is
an 8bit unsigned integer. Windows typically uses wchar_t instead, and
it's API functions are written with wchar_t in mind. 

Ideally there would be Open Sources portable libraries that hid all 
these details, but as of writing (early 2014) there aren't any. There 
are many ways to deal with this, and numerous websites discuss the 
various alternative approaches. The following document attempts to 
describe how OpenSCAD deals with the issues.

0. Program Startup, Command Line arguments, and Unicode

Windows has multiple different 'entry points' for historical reasons, 
some of which are Windows specific and some of which are designed to 
deal with unicode on Windows console programs, etc etc. There is 
WinMain, wmain, tchar or wchar_t wargv, etc. We do not do any of that. 
Instead, we use a normal, ordinary main() function. PlatformUtils has a 
function to grab Windows' UTF16 arguments using GetCommandLineW(), 
ignoring the non-unicode char*argv, and then convert the arguments from 
UTF16 to UTF8.

1. Command line and stdin/stdout

The Windows Command Line has a feature where a program must either be GUI or 
console, not both. A gui program cannot print/pipe to the cmdline and a 
cmdline program can't do GUI stuff. This is set in a bit in the executable.

Our solution, as documented in winconsole.c and winconsole.pri, is the 'devenv'
solution. Two separate binaries are created, openscad.com for cmdline and
and openscad.exe for gui. The .com program is just a wrapper that pipes
the stdin/stdout to and from openscad.exe. The .com program is created during
the package build and bundled with the OpenSCAD binary packages for Windows(TM).

There is no known use-case for running the .com file from within the GUI,
such as clicking on it. The .com file is only designed to be run from the
Windows(TM) command line / console.

2. Command Line character display / rendering (glyphs)

The windows(TM) 'dos box' console is not typically able to display Unicode 
characters properly. To actually do that, one needs to set up the Font 
and Code Page used by the console program itself, and then rewrite output
functions.

Currently OpenSCAD cannot properly output Unicode strings to the Windows 
console, even though it is properly processing unicode filenames 
and command line arguments

3. Unicode Filenames, UTF16, MingW, and c++ fstream

Windows(TM) Filenames are encoded as UTF16, typically using wchar_t as 
the character type instead of char for the file name. The functions that 
allow writing to files in Windows require UTF16 filenames in wchar_t* 
strings. Numerous 'w' functions in Windows API provide for this, like 
_wfopen(), std::wstring, etc etc.

However there is no way (as of writing in early 2014) in MingW / Gnu 
libstdc++ to construct an c++ std::fstream (including ifstream/ofstream) 
with a UTF16 filename. In a few years, something called 'tr2' will come 
to MingW/Gnu libstdc++ and this problem will be solved. However, until 
that time, we, and many other Open Source programs, use workarounds.

OpenSCAD's PlatformUtils contains typedef of ofstream and ifstream to
'imingstream' and 'omingstream', which masquerade as of/ifstreams.
They are actually std::stringstreams, which means the entire file is
resident in memory during processing.

4. Binary mode of file writing

Note that the issue of Filename encoding is completely separate from the
question of the encoding of the contents of the file itself. In OpenSCAD,
the .scad files should all be UTF8, the input formats like amf, xml, etc
should be UTF8, the ASCII formats like STL, DXF, OBJ, are all UTF8 because
ASCII is UTF8, etc etc. Also, all command line items are converted to UTF8
before any processing is done on them. Therefore. All file writing should
be in 'binary mode' on Windows and we write sequences of 8-bit bytes,
encoded in UTF8.

5. Boost and portability

Theoretically, Boost provides portable wrapper to some Windows and 
Unix/Mac file code, including fstream. In reality, since Boost is built 
on top of the libstdc++ that one is using, a version of Boost built 
under the current MingW cross-build will not be able to deal with UTF16
filenames.
