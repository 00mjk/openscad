This README covers a few caveats regarding OpenSCAD for Windows(TM) for
programmers and users.

Summary: As of writing, early 2014:

  -Build is done as a cross-build from linux using http://mxe.cc
  -Encoding of data in a file is a separate issue from encoding of it's filename
  -Windows filenames & cmdline args are ~UTF16, Linux/Mac are UTF8.
  -There is no open source ifstream/ofstream that works with UTF16 filenames
  -GNU FSF ifstream/ofstream did not c++ template their filenames
  -Therefore all file i/o must go through PlatformUtils:: wrappers
  -std::ifstream & std::ofstream are limited in capability by our wrappers
  -Windows stdout/stdin differs in behavior between GUI programs and cmdline
  -Windows console has issues outputting unicode of any encoding.
  -openscad.com is the command line wrapper for openscad.exe, the gui

Unicode
=======

000. Non-Unicode encodings

Systems using encodings that are not based on unicode are not suported. 
For example running on an old Windows machine that, for some reason, is 
using KOI8 or SJIS instead of Unicode, is not supported currently and 
will have unknown results.

00. Encoding of Unicode

As you may know, Unicode can be encoded in many different ways. 
Unix(TM)/Mac(TM) use UTF8, which makes each character into a sequence of 
one or more 8-bit bytes. Windows(TM) uses UTF16 (or UCS16 for very old 
versions). This means that the Windows Command Line Options and the 
Windows Filesystem will present UTF16 encoded filenames and commandline 
arguments to the program, as well as requiring UTF16 filenames the 
program when performing certain tasks on those files. Therefore, some 
code that works on Unix/Mac won't operate as expected on Windows.

Unix/Mac typically use 'char' as the basic data type, and assume it is
an 8bit unsigned integer. Windows typically uses wchar_t instead, and
it's API functions are written with wchar_t in mind. 

Ideally there would be Open Sources portable libraries that hid all 
these details, but as of writing (early 2014) there aren't any. There 
are many ways to deal with this, and numerous websites discuss the 
various alternative approaches. The following document attempts to 
describe how OpenSCAD deals with the issues.

0. Program Startup, main(), Command Line arguments, and Unicode

Windows has multiple different 'entry points' for historical reasons, 
some of which are Windows compiler specific and some of which are 
designed to deal with unicode on Windows console programs, etc etc. 
There is WinMain, wmain, tchar, etc, some of which use special args like 
wchar_t wargv, etc. MingW-64 also contains a '-municode' flag and other 
fetaures to work with these concepts. None of this is necessary. 

We just use ordinary int main(int argc,char*argv), ignore argc and argv 
(which will be invalid for unicode args) then call GetCommandLineW(), 
which fetches the 'real' UTF16 command line from the Operating System. 
Then... we convert the command line to UTF8, and re-write argv so it 
points to UTF8 encoded strings, and then proceed as normal.

Note that QT (our GUI toolkit) also reads from GetCommandLineW(), 
ignoring argc and argv, which can be helpful information in 
circumstances in which one may wish to start the GUI-mode openscad with 
command line arguments for some reason.

1. Command line and stdin/stdout

The Windows Command Line has a feature where a program must either be GUI or 
console, not both. A gui program cannot print/pipe to the cmdline and a 
cmdline program can't do GUI stuff. This is set in a bit in the executable.

Our solution, as documented in winconsole.c and winconsole.pri, is the 'devenv'
solution. Two separate binaries are created, openscad.com for cmdline and
and openscad.exe for gui. The .com program is just a wrapper that pipes
the stdin/stdout to and from openscad.exe. The .com program is created during
the package build and bundled with the OpenSCAD binary packages for Windows(TM).

There is no known use-case for running the .com file from within the GUI,
such as clicking on it. The .com file is only designed to be run from the
Windows(TM) command line / console.

2. Command Line character display / rendering (glyphs)

The windows(TM) 'dos box' or 'cmd.exe' console is not typically able to 
display Unicode characters properly. To actually do that, one needs to 
set up the Font and Code Page used by the console program itself, and 
then rewrite output functions.

Currently OpenSCAD cannot properly output Unicode strings to the Windows 
console, even though it is properly processing unicode filenames 
and command line arguments

3. Unicode Filenames, UTF16, MingW, and c++ fstream

Windows(TM) Filenames are encoded as UTF16, typically using wchar_t as 
the character type instead of char for the file name. The functions that 
allow writing to files in Windows require UTF16 filenames in wchar_t* 
strings. Numerous 'w' functions in Windows API provide for this, like 
_wfopen(), std::wstring, etc etc.

However there is no way (as of writing in early 2014) in MingW / Gnu 
libstdc++ to construct an c++ std::fstream (including ifstream/ofstream) 
with a UTF16 filename. In a few years, something called 'tr2' will come 
to MingW/Gnu libstdc++ and this problem will be solved. However, until 
that time, we, and many other Open Source programs, use workarounds.

OpenSCAD's PlatformUtils contains typedef of ofstream and ifstream to
'imingstream' and 'omingstream', which masquerade as of/ifstreams.
They are actually std::stringstreams, which means the entire file is
resident in memory during processing.

4. Binary mode of file writing

Note that the issue of Filename encoding is completely separate from the
question of the encoding of the contents of the file itself. In OpenSCAD,
the .scad files should all be UTF8, the input formats like amf, xml, etc
should be UTF8, the ASCII formats like STL, DXF, OBJ, are all UTF8 because
ASCII is UTF8, etc etc. Also, all command line items are converted to UTF8
before any processing is done on them. Therefore. All file writing should
be in 'binary mode' on Windows and we write sequences of 8-bit bytes,
encoded in UTF8.

5. Boost and portability

Theoretically, Boost provides portable wrapper to some Windows and 
Unix/Mac file code, including fstream. In reality, since Boost is built 
on top of the libstdc++ that one is using, and under MingW/MXE the 
GNU FSF libstdc++ is being used, and it doesn't have a UTF16 filename
support, boost doesn't either.


Builds
======

1. MSVC

As of writing, (early 2014), MSVC has not been tested as a compiler
in several years is not known to work. The difficult part is compiling
the numerous dependency libraries, including libgmp and libmpfr, for
which MSVC is not supported as a compiler. Additionally, the glib 
dependency has never been used under MSVC with OpenSCAD. Extensive
work would be required to fix the build. 

2. Cross build

The cross build, as detailed in README.md, is done from Linux and should
be relatively straightforward, if slow, on an ordinary Linux system like
Debian or Redhat. It can even be built from inside Windows if one downloads
a Virtual Machine of linux and builds inside of the VM. 

The entire cross-build depends on the http://mxe.cc system, not on the 
packaged cross-build tools that come with standard linux distributions. 

3. MingW64 vs MingW32

MingW64 is not simply a 64 bit port of MingW32. It contains many 
improvements over MingW32 and works a little bit differently. Also, 
MingW64 can actually build both 64 bit and 32 bit binaries. Both
are available from the mxe.cc system.

As of writing (early 2014), OpenSCAD's build scripts use MingW32 for
the 32 bit builds and MingW64 for the 64-bit builds. As time goes on,
it may be possible to move to an entirely MingW64 system that builds both
types of binaries.

4. Test suite cross build

The test suite cannot currently run under windows, as of writing (Early 2014). 
However it can be run under the Wine environment under linux.

See tests/CMingw-cross-env.cmake and doc/testing.txt

